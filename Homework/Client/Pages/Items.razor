@page "/items"

@inject IProductService baraaservice;
@inject IWarehouseService warehouseService;
@inject JsInterop js;

<PageTitle>Index</PageTitle>

@if (Baraanuud == null)
{
    <h3>Loading ...</h3>
}
else
{
    <div @onkeydown="HandleKeyDown">


        <h3>Baraa</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Measure Unit</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var baraa in Baraanuud)
                {
                    <tr>
                        <td>@baraa.Name</td>
                        <td>@baraa.Meas</td>
                        <td>@baraa.Price</td>
                        <td><button type="button" class="btn btn-primary" @onclick="e=>OnDeleteButtonClick(baraa.Id)">Remove</button></td>
                        <td><button type="button" class="btn btn-primary" @onclick="e=>OnEditButtonClick(baraa)">Edit</button></td>
                    </tr>
                }
                <tr>
                    <td><input type="text" @bind="@newBaraa.Name" /></td>
                    <td>
                        <select @bind="@newBaraa.Meas" id="cars" name="cars">
                            <option value="@UnitMeas.Undefined">Undefined</option>
                            <option value="@UnitMeas.Boodol">Boodol</option>
                            <option value="@UnitMeas.Box">Box</option>
                            <option value="@UnitMeas.Gallon">Gallon</option>
                            <option value="@UnitMeas.KG">KG</option>
                            <option value="@UnitMeas.Litr">Litr</option>
                            <option value="@UnitMeas.Unit">Unit</option>>
                        </select>
                    </td>
                    <td><input type="number" @bind="@newBaraa.Price" /></td>
                    <td><button type="button" class="btn btn-primary" @onclick="e=>OnAddButtonClick()">add new Item</button></td>
                </tr>
            </tbody>
        </table>

        <h3>WareHouses</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var warehouse in WareHouses)
                {
                    <tr>
                        <td>@warehouse.Name</td>
                    </tr>
                }
            </tbody>
        </table>
        <Modal @ref="Modal" OnSaveChanges="OnModalSave">
            <Title>
                Edit Item
            </Title>
            <Body>
            <td><input type="text" @bind="Modal.editingBaraa.Name" /></td>
            <br>    
            <td>
                <select @bind="@Modal.editingBaraa.Meas" id="cars" name="cars">
                    <option value="@UnitMeas.Undefined">Undefined</option>
                    <option value="@UnitMeas.Boodol">Boodol</option>
                    <option value="@UnitMeas.Box">Box</option>
                    <option value="@UnitMeas.Gallon">Gallon</option>
                    <option value="@UnitMeas.KG">KG</option>
                    <option value="@UnitMeas.Litr">Litr</option>
                    <option value="@UnitMeas.Unit">Unit</option>>
                </select>
            </td>
            <br>
            <td><input type="number" @bind="@Modal.editingBaraa.Price" /></td>
            </Body>
        </Modal>
    </div>
}



@code {
    private List<Product>? Baraanuud;
    Product newBaraa = new Product();
    private List<WareHouse>? WareHouses;
    Modal Modal;

    protected override async Task OnInitializedAsync()
    {
        await RefreshBaraa();
        await warehouseService.GetWareHousesAsync();
        WareHouses = warehouseService.WareHouses;
        //HttpResponseMessage response = await httpClient.GetAsync("api/Baraa");
        //response.EnsureSuccessStatusCode();
        //string responseBody = await response.Content.ReadAsStringAsync();
        //Console.WriteLine(responseBody);
    }
    public async Task OnAddButtonClick()
    {
        if (!String.IsNullOrEmpty(newBaraa.Name) && newBaraa.Price > 0 && newBaraa.Meas != UnitMeas.Undefined)
        {
            Console.WriteLine("Added " + newBaraa);
            await baraaservice.AddItemAsync(newBaraa);
            newBaraa = new Product();
            await RefreshBaraa();
        }
        else
        {
            Console.WriteLine("InValid Baraa");
            await js.Alert("Бараа бүрэн бус байна");
        }
    }
    public async Task OnDeleteButtonClick(int id)
    {
        Console.WriteLine("Clicked " + id);
        await baraaservice.RemoveItem(id);
        await RefreshBaraa();
    }
    public async Task OnEditButtonClick(Product baraa)
    {
        Console.WriteLine("Edited " + baraa.Id);
        await Task.Run(() => Modal.Open(baraa));
    }
    public async Task RefreshBaraa()
    {
        await baraaservice.GetItemsAsync();
        Baraanuud = baraaservice.Items;
    }
    public void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "e")
        {
            Modal.Open();
        }
        else if (e.Key == "q")
        {
            Modal.Close();
        }
    }
    public async Task OnModalSave()
    {
        Modal.Close();
        await baraaservice.EditItem(Modal.editingBaraa);
        //Modal.ResetBaraa();
        await RefreshBaraa();
    }
}

