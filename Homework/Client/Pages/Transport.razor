@page "/transport"

@inject IProductService baraaservice;
@inject IWarehouseService warehouseService;
@inject JsInterop js;

<PageTitle>Transport</PageTitle>

@if (WareHouses == null)
{
    <h3>Loading ...</h3>
}
else
{
    <div @onkeydown="HandleKeyDown">
        <h3>WareHouse</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Items</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var wareHouse in WareHouses)
                {
                    <tr>
                        <td>@wareHouse.Name</td>
                        <td>
                            <button @onclick="OnAddButtonClick">AddProducts</button>
                        </td>
                        @foreach (var item in wareHouse.Items)
                        {
                        <tr>
                            <td>@item.Name</td>
                        </tr>
                        <tr>
                            <td>
                                <button>Sell</button>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <button>Transfer</button>
                            </td>
                        </tr>

                        }
                    </tr>
                }
            </tbody>
        </table>
        <Modal @ref="Modal" OnSaveChanges="OnModalSave">
            <Title>
                Edit Item
            </Title>
            <Body>
            <td><input type="text" @bind="Modal.editingBaraa.Name" /></td>
            <br>
            <td>
                <select @bind="@Modal.editingBaraa.Meas" id="cars" name="cars">
                    <option value="@UnitMeas.Undefined">Undefined</option>
                    <option value="@UnitMeas.Boodol">Boodol</option>
                    <option value="@UnitMeas.Box">Box</option>
                    <option value="@UnitMeas.Gallon">Gallon</option>
                    <option value="@UnitMeas.KG">KG</option>
                    <option value="@UnitMeas.Litr">Litr</option>
                    <option value="@UnitMeas.Unit">Unit</option>>
                </select>
            </td>
            <br>
            <td><input type="number" @bind="@Modal.editingBaraa.Price" /></td>
            </Body>
        </Modal>
    </div>
}



@code {
    WareHouse wareHouse = new WareHouse();
    private List<WareHouse>? WareHouses;
    Modal Modal;

    protected override async Task OnInitializedAsync()
    {
        await warehouseService.GetWareHousesAsync();
        WareHouses = warehouseService.WareHouses;
        //HttpResponseMessage response = await httpClient.GetAsync("api/Baraa");
        //response.EnsureSuccessStatusCode();
        //string responseBody = await response.Content.ReadAsStringAsync();
        //Console.WriteLine(responseBody);
    }
    public async Task OnAddButtonClick()
    {

        //if (!String.IsNullOrEmpty(newBaraa.Name) && newBaraa.Price > 0 && newBaraa.Meas != UnitMeas.Undefined)
        //{
        //    Console.WriteLine("Added " + newBaraa);
        //    await baraaservice.AddItemAsync(newBaraa);
        //    newBaraa = new Baraa();
        //    await RefreshBaraa();
        //}
        //else
        //{
        //    Console.WriteLine("InValid Baraa");
        //    bool isConfirmed = await js.Confirm("Бараа бүрэн бус байна");
        //    await js.Confirm("Бараа бүрэн бус байна");
        //}
    }
    public async Task OnDeleteButtonClick(int id)
    {
        Console.WriteLine("Clicked " + id);
        await baraaservice.RemoveItem(id);
    }
    public async Task OnEditButtonClick(Product baraa)
    {
        Console.WriteLine("Edited " + baraa.Id);
        await Task.Run(() => Modal.Open(baraa));
    }
    public void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "e")
        {
            Modal.Open();
        }
        else if (e.Key == "q")
        {
            Modal.Close();
        }
    }
    public async Task OnModalSave()
    {
        Modal.Close();
        await baraaservice.EditItem(Modal.editingBaraa);
        //Modal.ResetBaraa();
    }
}

